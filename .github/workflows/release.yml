# This workflow is used for publishing the NuGet package and Docker image.
#
# Before triggering a release the `semver.txt` file should be updated in the
# relevant branch.
#
# When commiting the version change in `semver.txt` the commit message is
# important as it will be used for the release in GitHub.
#
# For an example commit browse to
# https://github.com/CycloneDX/cyclonedx-dotnet/commit/d110af854371374460430bb8438225a7d7a84274.
#
# The resulting release is here
# https://github.com/CycloneDX/cyclonedx-dotnet/releases/tag/v1.0.0.
#
# Releases are triggered manually. This can be done by browsing to
# https://github.com/CycloneDX/cyclonedx-dotnet/actions?query=workflow%3ARelease
# and selecting "Run workflow". If releasing a patch for a previous version
# make sure the correct branch is selected. It will default to the default
# branch.
name: Release

on:
  workflow_dispatch

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x

      # Build and package everything, including the Docker image
      - name: Package release
        id: package_release
        run: |
          VERSION=`cat semver.txt`
          OUTPUT=./nupkgs
          echo "##[set-output name=version;]$VERSION"
          echo "##[set-output name=package_name;]CycloneDX.$VERSION.nupkg"
          echo "##[set-output name=package_filename;]$OUTPUT/CycloneDX.$VERSION.nupkg"
          REPO=cyclonedx/cyclonedx-dotnet
          dotnet build --configuration Release /p:Version=$VERSION
          dotnet pack CycloneDX/CycloneDX.csproj --configuration Release /p:Version=$VERSION --output $OUTPUT
          docker build -f Dockerfile --build-arg VERSION=$VERSION -t $REPO:$VERSION -t $REPO:latest .

      # We install the newly generated tool as bit of a "smoke test" and to generate an SBOM for the release
      - name: Install newly generated version of CLI tool
        run: |
          dotnet tool install --global CycloneDX --version ${{ steps.package_release.outputs.version }} --add-source ./nupkgs

      - name: Generate BOM using Docker Container
        run: |  
          echo "repo: ${{$REPO}}"
          echo $VERSION
          echo $(pwd)
          docker run --rm -v $(pwd):/usr/src/project $REPO:$VERSION /usr/src/project/CycloneDX.sln -o /usr/src/project 
      
#      - name: Generate XML SBOM
#        uses: CycloneDX/gh-dotnet-generate-sbom@master
#        with:
#          path: ./CycloneDX.sln
#          github-bearer-token: ${{ secrets.GITHUB_TOKEN }}
#      - name: Generate JSON SBOM
#        uses: CycloneDX/gh-dotnet-generate-sbom@master
#        with:
#          path: ./CycloneDX.sln
#          json: true
#          github-bearer-token: ${{ secrets.GITHUB_TOKEN }}
